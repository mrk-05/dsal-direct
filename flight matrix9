#include <iostream>
#include <queue>
#include <string>
using namespace std;

class FlightGraph {
public:
    int numCities;
    string cityNames[10];
    int adjMatrix[10][10]; // Adjacency matrix representation


    FlightGraph() {
        numCities = 0;
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                adjMatrix[i][j] = 0;
            }
        }
    }

    void addCity(string cityName) {
        cityNames[numCities++] = cityName;
    }

    void addFlight(string srcCity, string destCity, int cost) {
        int srcIndex = -1, destIndex = -1;
        for (int i = 0; i < numCities; ++i) {
            if (cityNames[i] == srcCity)
                srcIndex = i;
            if (cityNames[i] == destCity)
                destIndex = i;
        }
        if (srcIndex != -1 && destIndex != -1) {
            adjMatrix[srcIndex][destIndex] = cost;
            adjMatrix[destIndex][srcIndex] = cost; // Assuming undirected graph
        } else {
            cout << "Invalid city names!" << endl;
        }
    }

    void displayAdjMatrix() {
        cout << "Adjacency Matrix:" << endl;
        cout << "   ";
        for (int i = 0; i < numCities; ++i) {
            cout << cityNames[i] << " ";
        }
        cout << endl;
        for (int i = 0; i < numCities; ++i) {
            cout << cityNames[i] << " |";
            for (int j = 0; j < numCities; ++j) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << "|" << endl;
        }
    }

    bool isConnected() {
        bool visited[10] = {false};
        queue<int> q;
        q.push(0); // Start with the first city
        visited[0] = true;

        while (!q.empty()) {
            int currentCity = q.front();
            q.pop();

            for (int i = 0; i < numCities; ++i) {
                if (adjMatrix[currentCity][i] != 0 && !visited[i]) {
                    q.push(i);
                    visited[i] = true;
                }
            }
        }

        for (int i = 0; i < numCities; ++i) {
            if (!visited[i]) {
                return false; // Graph is not connected
            }
        }
        return true; // Graph is connected
    }
};

int main() {
    FlightGraph graph;

    int numCities;
    cout << "Enter the number of cities: ";
    cin >> numCities;

    for (int i = 0; i < numCities; ++i) {
        string cityName;
        cout << "Enter name of city " << i + 1 << ": ";
        cin >> cityName;
        graph.addCity(cityName);
    }

    for (int i = 0; i < numCities; ++i) {
        for (int j = i + 1; j < numCities; ++j) {
            int cost;
            cout << "Enter the cost of flight from " << graph.cityNames[i] << " to " << graph.cityNames[j] << ": ";
            cin >> cost;
            graph.addFlight(graph.cityNames[i], graph.cityNames[j], cost);
        }
    }

    graph.displayAdjMatrix();

    if (graph.isConnected()) {
        cout << "The graph is connected." << endl;
    } else {
        cout << "The graph is not connected." << endl;
    }

    return 0;
}

/*Enter the number of cities: 1
Enter name of city 1: mumbai
Adjacency Matrix:
   mumbai 
mumbai |0 |
The graph is connected.
*/
